name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 2"

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install Cosign
        id: install-cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: 'v2.4.2'

      - name: Set Build Tag
        id: set-env
        run: |
          echo "TAG=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "TAG is set to $(date +%Y.%m.%d)"

      - name: Docker Login
        id: docker-login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        id: github-login
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3.4.0

      - name: Set up Docker Buildx
        id: buildx-setup
        uses: docker/setup-buildx-action@v3.9.0

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: | 
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            latest
            ${{ env.TAG }}

      - name: Build and Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          sbom: true
          provenance: mode=max
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Slim Docker Image for amd64
        id: slim-amd64
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_NEW_LABEL: ${{ steps.meta.outputs.labels }}
          DSLIM_IMAGE_BUILD_ARCH: amd64
          DSLIM_HTTP_PROBE: false
        with:
          target: ${{ github.repository }}:latest
          tag: slim-amd64
      
      - name: Slim Docker Image for arm64
        id: slim-arm64
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_NEW_LABEL: ${{ steps.meta.outputs.labels }}
          DSLIM_IMAGE_BUILD_ARCH: arm64
          DSLIM_HTTP_PROBE: false
        with:
          target: ${{ github.repository }}:latest
          tag: slim-arm64

      - name: Push Intermediate Slim Images
        run: |
          docker tag ${{ github.repository }}:slim-amd64 ghcr.io/${{ github.repository }}:slim-amd64
          docker tag ${{ github.repository }}:slim-arm64 ghcr.io/${{ github.repository }}:slim-arm64
          docker push ${{ github.repository }}:slim-amd64
          docker push ${{ github.repository }}:slim-arm64
          docker push ghcr.io/${{ github.repository }}:slim-amd64
          docker push ghcr.io/${{ github.repository }}:slim-arm64
          
      - name: Create and Push Multi-Arch Manifest for Slim Image
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: ${{ github.repository }}:slim
          images: ${{ github.repository }}:slim-amd64,${{ github.repository }}:slim-arm64
          push: true

      - name: Create and Push Multi-Arch Manifest for Slim Image for GHCR
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: ghcr.io/${{ github.repository }}:slim
          images: ghcr.io/${{ github.repository }}:slim-amd64,ghcr.io/${{ github.repository }}:slim-arm64
          push: true
          
      - name: Generate artifact attestation
        id: artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
          
      - name: Generate artifact attestation for GHCR
        id: artifacts-ghcr
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Generate SBOM GHCR
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:latest
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Attest SBOM GHCR
        uses: actions/attest-sbom@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: 'sbom.spdx.json'
          push-to-registry: true

      - name: Sign the Published Docker Image
        id: sign-image
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          for tag in $TAGS; do
            echo "Signing ${tag}@${DIGEST}"
            COSIGN_EXPERIMENTAL=1 cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Sign Slim Image
        id: sign-slim
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
          SLIM_TAGS: "${{ github.repository }}:slim ghcr.io/${{ github.repository }}:slim"
        run: |
          for tag in $SLIM_TAGS; do
            cosign sign --yes "${tag}"
          done

      - name: Create Github release
        id: github-releasing
        uses: ncipollo/release-action@v1.16.0
        with:
          tag: ${{ env.TAG }}
          allowUpdates: true
          makeLatest: true
