name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 2"

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Install Cosign
        id: install-cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.8.2
        with:
          cosign-release: 'v2.4.3'

      - name: Set Build Tag
        id: set-env
        run: |
          echo "TAG=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "TAG is set to $(date +%Y.%m.%d)"

      - name: Docker Login
        id: docker-login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        id: github-login
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        id: buildx-setup
        uses: docker/setup-buildx-action@v3.10.0

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: | 
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            latest
            ${{ env.TAG }}

      - name: Docker Bake Build and Push
        id: bake
        uses: docker/bake-action@v6.8.0
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          targets: build
          push: true
          sbom: true
          provenance: mode=max
          
      - name: Extract Digest for Attestation
        id: extract_digest
        run: |
          DIGEST=$(echo '${{ steps.bake.outputs.metadata }}' | jq -r '.build["containerimage.digest"]')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        id: artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ github.repository }}
          subject-digest: ${{ steps.extract_digest.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation for GHCR
        id: artifacts-ghcr
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.extract_digest.outputs.digest }}
          push-to-registry: true

      - name: Generate SBOM GHCR
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:latest
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Attest SBOM GHCR
        uses: actions/attest-sbom@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.extract_digest.outputs.digest }}
          sbom-path: 'sbom.spdx.json'
          push-to-registry: true

      - name: Sign the Published Docker Image
        id: sign-image
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.extract_digest.outputs.digest }}
        run: |
          for tag in $TAGS; do
            echo "Signing ${tag}@${DIGEST}"
            COSIGN_EXPERIMENTAL=1 cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Generate Release Notes (Docker & Supply Chain Info)
        if: github.event_name != 'pull_request'
        run: |
          TAG="${{ env.TAG }}"
          REPO="${{ github.repository }}"
          DIGEST="${{ steps.extract_digest.outputs.digest }}"
          RUN_ID=${{ github.run_id }}
          {
            echo "## ðŸš€ Docker Images for This Release"
            echo ""
            echo "This release provides multi-architecture Docker images (\`amd64\`, \`arm64\`, and \`arm\`) published to both **Docker Hub** and **GitHub Container Registry (GHCR)**."
            echo ""
            echo "---"
            echo ""
            echo "### ðŸ”¹ **Docker Hub**"
            echo ""
            echo "> **Note:** Docker Hub is the world's most popular public container registry, but it enforces [anonymous pull limits](https://www.docker.com/increase-rate-limits). If you are automating deployments or have many servers, consider using GHCR below to avoid interruptions."
            echo ""
            echo "**Repository:** \`${REPO}\`  "
            echo "**Tags available:** \`latest\`, \`${TAG}\`"
            echo "**Image Digest:** \`${DIGEST}\`"
            echo ""
            echo "**Pull commands:**"
            echo "\`\`\`sh"
            echo "docker pull ${REPO}:latest"
            echo "\`\`\`"
            echo "\`\`\`sh"
            echo "docker pull ${REPO}:${TAG}"
            echo "\`\`\`"
            echo ""
            echo "---"
            echo ""
            echo "### ðŸ”¹ **GitHub Container Registry (GHCR)**"
            echo ""
            echo "> **GHCR** offers higher pull rate limits, strong integration with GitHub, and is recommended for most CI/CD or cloud-native environments."
            echo ""
            echo "**Repository:** \`ghcr.io/${REPO}\`  "
            echo "**Tags available:** \`latest\`, \`${TAG}\`"
            echo ""
            echo "**Pull commands:**"
            echo "\`\`\`sh"
            echo "docker pull ghcr.io/${REPO}:latest"
            echo "\`\`\`"
            echo "\`\`\`sh"
            echo "docker pull ghcr.io/${REPO}:${TAG}"
            echo "\`\`\`"
            echo "Pull by digest:"
            echo "\`\`\`sh"
            echo "docker pull ghcr.io/${REPO}@${DIGEST}"
            echo "\`\`\`"
            echo ""
            echo "---"
            echo ""
            echo "### ðŸ”’ Supply Chain Security"
            echo ""
            echo "These images are signed and include:"
            echo ""
            echo "- **SLSA Provenance:** Downloadable and verifiable from the GitHub UI."
            echo "- **Cosign signatures:** For tamper-evidence and trust."
            echo ""
            echo "**How to verify:**"
            echo ""
            echo "# 1. Verify the image signature (recommended for everyone)"
            echo "\`\`\`sh"
            echo "cosign verify \\"
            echo "  --certificate-identity \"https://github.com/${REPO}/.github/workflows/main.yml@refs/heads/main\" \\"
            echo "  --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\"
            echo "  ghcr.io/${REPO}:@${DIGEST}"
            echo "\`\`\`"
            echo ""
            echo "# 2. Download provenance/SBOM from the workflow run artifacts below."
            echo "##   Then verify with:"
            echo "\`\`\`sh"
            echo "gh attestation verify --owner ${REPO%%/*} <provenance-or-sbom-file.json>"
            echo "\`\`\`"
            echo "**Links:**"
            echo ""
            echo "- [GitHub Actions run #${RUN_ID}](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            echo "- [Attestations for this build](https://github.com/${REPO}/attestations)"
            echo ""
            echo "_Download the 'spdx.json' or provenance artifact from the run above to verify._"
            echo ""
            echo "_Note: 'cosign verify-attestation' is not supported for this release, as attestations are not yet published to the registry. Use the provenance file and 'gh attestation verify' instead._"
            echo ""
            echo "See [Sigstore Cosign Docs](https://docs.sigstore.dev/cosign/overview/) and [GitHub Attestation Docs](https://docs.github.com/en/code-security/supply-chain-security/understanding-supply-chain-security/using-slsa-compliance-for-actions) for full instructions."
            echo ""
            echo "---"
            echo ""
            echo "#### Need help or want to report an issue?"
            echo "Open an issue on [GitHub](https://github.com/${REPO}/issues)."
          } > release_notes.txt
          
      - name: Create Github release
        id: github-releasing
        uses: ncipollo/release-action@v1.16.0
        with:
          tag: ${{ env.TAG }}
          allowUpdates: true
          makeLatest: true
          bodyFile: release_notes.txt
